type PowerMap = Map<Number, Map<Number, Number|null>>;

const toColumnsMap =
  (i: number, idx: number) =>
    [idx + 2, (!Number.isNaN(i)) ? i : null];

const toRowsMap =
  (i: number[], idx: number) =>
    // @ts-expect-error - I'm not sure how to fix this, but it works
    [idx, new Map(i.map(toColumnsMap))];

const powerArray = [
  [null, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4],
  [null, 0, 0, 0, 1, 2, 3, 3, 3, 4, 4],
  [null, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4],
  [null, 0, 0, 1, 1, 2, 3, 4, 4, 4, 5],
  [null, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5],
  [null, 0, 1, 1, 2, 2, 3, 4, 5, 5, 5],
  [null, 0, 1, 1, 2, 3, 3, 4, 5, 5, 5],
  [null, 0, 1, 1, 2, 3, 4, 4, 5, 5, 6],
  [null, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6],
  [null, 0, 1, 2, 3, 3, 4, 4, 5, 6, 7],
  [null, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7],
  [null, 1, 2, 2, 3, 3, 4, 5, 6, 6, 7],
  [null, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7],
  [null, 1, 2, 3, 3, 4, 4, 5, 6, 7, 7],
  [null, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8],
  [null, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8],
  [null, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8],
  [null, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8],
  [null, 1, 2, 3, 4, 5, 6, 6, 7, 7, 8],
  [null, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9],
  [null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
  [null, 1, 2, 3, 4, 6, 6, 7, 8, 9, 10],
  [null, 1, 2, 3, 5, 6, 6, 7, 8, 9, 10],
  [null, 2, 2, 3, 5, 6, 7, 7, 8, 9, 10],
  [null, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10],
  [null, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10],
  [null, 2, 3, 4, 5, 6, 8, 8, 9, 9, 10],
  [null, 2, 3, 4, 6, 6, 8, 8, 9, 9, 10],
  [null, 2, 3, 4, 6, 6, 8, 9, 9, 10, 10],
  [null, 2, 3, 4, 6, 7, 8, 9, 9, 10, 10],
  [null, 2, 4, 4, 6, 7, 8, 9, 10, 10, 10],
  [null, 2, 4, 5, 6, 7, 8, 9, 10, 10, 11],
  [null, 3, 4, 5, 6, 7, 8, 10, 10, 10, 11],
  [null, 3, 4, 5, 6, 8, 8, 10, 10, 10, 11],
  [null, 3, 4, 5, 6, 8, 9, 10, 10, 11, 11],
  [null, 3, 4, 5, 7, 8, 9, 10, 10, 11, 12],
  [null, 3, 5, 5, 7, 8, 9, 10, 11, 11, 12],
  [null, 3, 5, 6, 7, 8, 9, 10, 11, 12, 12],
  [null, 3, 5, 6, 7, 8, 10, 10, 11, 12, 13],
  [null, 4, 5, 6, 7, 8, 10, 11, 11, 12, 13],
  [null, 4, 5, 6, 7, 9, 10, 11, 11, 12, 13],
  [null, 4, 6, 6, 7, 9, 10, 11, 12, 12, 13],
  [null, 4, 6, 7, 7, 9, 10, 11, 12, 13, 13],
  [null, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14],
  [null, 4, 6, 7, 8, 10, 10, 11, 12, 13, 14],
  [null, 4, 6, 7, 9, 10, 10, 11, 12, 13, 14],
  [null, 4, 6, 7, 9, 10, 10, 12, 13, 13, 14],
  [null, 4, 6, 7, 9, 10, 11, 12, 13, 13, 15],
  [null, 4, 6, 7, 9, 10, 12, 12, 13, 13, 15],
  [null, 4, 6, 7, 10, 10, 12, 12, 13, 14, 15],
  [null, 4, 6, 8, 10, 10, 12, 12, 13, 15, 15],
  [null, 5, 7, 8, 10, 10, 12, 12, 13, 15, 15],
  [null, 5, 7, 8, 10, 11, 12, 12, 13, 15, 15],
  [null, 5, 7, 9, 10, 11, 12, 12, 14, 15, 15],
  [null, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16],
  [null, 5, 7, 10, 10, 11, 12, 13, 14, 16, 16],
  [null, 5, 8, 10, 10, 11, 12, 13, 15, 16, 16],
  [null, 5, 8, 10, 11, 11, 12, 13, 15, 16, 17],
  [null, 5, 8, 10, 11, 12, 12, 13, 15, 16, 17],
  [null, 5, 9, 10, 11, 12, 12, 14, 15, 16, 17],
  [null, 5, 9, 10, 11, 12, 13, 14, 15, 16, 18],
  [null, 5, 9, 10, 11, 12, 13, 14, 16, 17, 18],
  [null, 5, 9, 10, 11, 13, 13, 14, 16, 17, 18],
  [null, 5, 9, 10, 11, 13, 13, 15, 17, 17, 18],
  [null, 5, 9, 10, 11, 13, 14, 15, 17, 17, 18],
  [null, 5, 9, 10, 12, 13, 14, 15, 17, 18, 18],
  [null, 5, 9, 10, 12, 13, 15, 15, 17, 18, 19],
  [null, 5, 9, 10, 12, 13, 15, 16, 17, 19, 19],
  [null, 5, 9, 10, 12, 14, 15, 16, 17, 19, 19],
  [null, 5, 9, 10, 12, 14, 16, 16, 17, 19, 19],
  [null, 5, 9, 10, 12, 14, 16, 17, 18, 19, 19],
  [null, 5, 9, 10, 13, 14, 16, 17, 18, 19, 20],
  [null, 5, 9, 10, 13, 15, 16, 17, 18, 19, 20],
  [null, 5, 9, 10, 13, 15, 16, 17, 19, 20, 21],
  [null, 6, 9, 10, 13, 15, 16, 18, 19, 20, 21],
  [null, 6, 9, 10, 13, 16, 16, 18, 19, 20, 21],
  [null, 6, 9, 10, 13, 16, 17, 18, 19, 20, 21],
  [null, 6, 9, 10, 13, 16, 17, 18, 20, 21, 22],
  [null, 6, 9, 10, 13, 16, 17, 19, 20, 22, 23],
  [null, 6, 9, 10, 13, 16, 18, 19, 20, 22, 23],
  [null, 6, 9, 10, 13, 16, 18, 20, 21, 22, 23],
  [null, 6, 9, 10, 13, 17, 18, 20, 21, 22, 23],
  [null, 6, 9, 10, 14, 17, 18, 20, 21, 22, 24],
  [null, 6, 9, 11, 14, 17, 18, 20, 21, 23, 24],
  [null, 6, 9, 11, 14, 17, 19, 20, 21, 23, 24],
  [null, 6, 9, 11, 14, 17, 19, 21, 22, 23, 24],
  [null, 7, 10, 11, 14, 17, 19, 21, 22, 23, 25],
  [null, 7, 10, 12, 14, 17, 19, 21, 22, 24, 25],
  [null, 7, 10, 12, 14, 18, 19, 21, 22, 24, 25],
  [null, 7, 10, 12, 15, 18, 19, 21, 22, 24, 26],
  [null, 7, 10, 12, 15, 18, 19, 21, 23, 25, 26],
  [null, 7, 11, 13, 15, 18, 19, 21, 23, 25, 26],
  [null, 7, 11, 13, 15, 18, 20, 21, 23, 25, 27],
  [null, 8, 11, 13, 15, 18, 20, 22, 23, 25, 27],
  [null, 8, 11, 13, 16, 18, 20, 22, 23, 25, 28],
  [null, 8, 11, 14, 16, 18, 20, 22, 23, 26, 28],
  [null, 8, 11, 14, 16, 19, 20, 22, 24, 26, 28],
  [null, 8, 12, 14, 16, 19, 20, 22, 24, 26, 28],
  [null, 8, 12, 15, 16, 19, 20, 22, 24, 27, 28],
  [null, 8, 12, 15, 17, 19, 20, 22, 24, 27, 29],
  [null, 8, 12, 15, 18, 19, 20, 22, 24, 27, 30]
]

// @ts-expect-error - I'm not sure how to tell TS that it's okay to have number or null
const powerMap: PowerMap = new Map(powerArray.map(toRowsMap));

export default powerMap;